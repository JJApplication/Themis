// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/port_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortService_GetRandomPort_FullMethodName   = "/port_service.PortService/GetRandomPort"
	PortService_GetRandomPorts_FullMethodName  = "/port_service.PortService/GetRandomPorts"
	PortService_GetAppPort_FullMethodName      = "/port_service.PortService/GetAppPort"
	PortService_SetAppPort_FullMethodName      = "/port_service.PortService/SetAppPort"
	PortService_QuickSetAppPort_FullMethodName = "/port_service.PortService/QuickSetAppPort"
	PortService_DeleteAppPort_FullMethodName   = "/port_service.PortService/DeleteAppPort"
	PortService_IsPortAvailable_FullMethodName = "/port_service.PortService/IsPortAvailable"
)

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 端口服务定义
type PortServiceClient interface {
	// 获取一个随机端口
	GetRandomPort(ctx context.Context, in *GetRandomPortRequest, opts ...grpc.CallOption) (*GetRandomPortResponse, error)
	// 获取N个随机端口
	GetRandomPorts(ctx context.Context, in *GetRandomPortsRequest, opts ...grpc.CallOption) (*GetRandomPortsResponse, error)
	// 获取某个APP的端口
	GetAppPort(ctx context.Context, in *GetAppPortRequest, opts ...grpc.CallOption) (*GetAppPortResponse, error)
	// 设置某个APP的端口
	SetAppPort(ctx context.Context, in *SetAppPortRequest, opts ...grpc.CallOption) (*SetAppPortResponse, error)
	// 快速设置APP端口（存在则返回，不存在则生成随机端口）
	QuickSetAppPort(ctx context.Context, in *QuickSetAppPortRequest, opts ...grpc.CallOption) (*QuickSetAppPortResponse, error)
	// 删除某个服务的端口信息
	DeleteAppPort(ctx context.Context, in *DeleteAppPortRequest, opts ...grpc.CallOption) (*DeleteAppPortResponse, error)
	// 检查端口是否可用
	IsPortAvailable(ctx context.Context, in *IsPortAvailableRequest, opts ...grpc.CallOption) (*IsPortAvailableResponse, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) GetRandomPort(ctx context.Context, in *GetRandomPortRequest, opts ...grpc.CallOption) (*GetRandomPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomPortResponse)
	err := c.cc.Invoke(ctx, PortService_GetRandomPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetRandomPorts(ctx context.Context, in *GetRandomPortsRequest, opts ...grpc.CallOption) (*GetRandomPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRandomPortsResponse)
	err := c.cc.Invoke(ctx, PortService_GetRandomPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetAppPort(ctx context.Context, in *GetAppPortRequest, opts ...grpc.CallOption) (*GetAppPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppPortResponse)
	err := c.cc.Invoke(ctx, PortService_GetAppPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) SetAppPort(ctx context.Context, in *SetAppPortRequest, opts ...grpc.CallOption) (*SetAppPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAppPortResponse)
	err := c.cc.Invoke(ctx, PortService_SetAppPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) QuickSetAppPort(ctx context.Context, in *QuickSetAppPortRequest, opts ...grpc.CallOption) (*QuickSetAppPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuickSetAppPortResponse)
	err := c.cc.Invoke(ctx, PortService_QuickSetAppPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) DeleteAppPort(ctx context.Context, in *DeleteAppPortRequest, opts ...grpc.CallOption) (*DeleteAppPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppPortResponse)
	err := c.cc.Invoke(ctx, PortService_DeleteAppPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) IsPortAvailable(ctx context.Context, in *IsPortAvailableRequest, opts ...grpc.CallOption) (*IsPortAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPortAvailableResponse)
	err := c.cc.Invoke(ctx, PortService_IsPortAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility.
//
// 端口服务定义
type PortServiceServer interface {
	// 获取一个随机端口
	GetRandomPort(context.Context, *GetRandomPortRequest) (*GetRandomPortResponse, error)
	// 获取N个随机端口
	GetRandomPorts(context.Context, *GetRandomPortsRequest) (*GetRandomPortsResponse, error)
	// 获取某个APP的端口
	GetAppPort(context.Context, *GetAppPortRequest) (*GetAppPortResponse, error)
	// 设置某个APP的端口
	SetAppPort(context.Context, *SetAppPortRequest) (*SetAppPortResponse, error)
	// 快速设置APP端口（存在则返回，不存在则生成随机端口）
	QuickSetAppPort(context.Context, *QuickSetAppPortRequest) (*QuickSetAppPortResponse, error)
	// 删除某个服务的端口信息
	DeleteAppPort(context.Context, *DeleteAppPortRequest) (*DeleteAppPortResponse, error)
	// 检查端口是否可用
	IsPortAvailable(context.Context, *IsPortAvailableRequest) (*IsPortAvailableResponse, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortServiceServer struct{}

func (UnimplementedPortServiceServer) GetRandomPort(context.Context, *GetRandomPortRequest) (*GetRandomPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomPort not implemented")
}
func (UnimplementedPortServiceServer) GetRandomPorts(context.Context, *GetRandomPortsRequest) (*GetRandomPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomPorts not implemented")
}
func (UnimplementedPortServiceServer) GetAppPort(context.Context, *GetAppPortRequest) (*GetAppPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPort not implemented")
}
func (UnimplementedPortServiceServer) SetAppPort(context.Context, *SetAppPortRequest) (*SetAppPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppPort not implemented")
}
func (UnimplementedPortServiceServer) QuickSetAppPort(context.Context, *QuickSetAppPortRequest) (*QuickSetAppPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickSetAppPort not implemented")
}
func (UnimplementedPortServiceServer) DeleteAppPort(context.Context, *DeleteAppPortRequest) (*DeleteAppPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppPort not implemented")
}
func (UnimplementedPortServiceServer) IsPortAvailable(context.Context, *IsPortAvailableRequest) (*IsPortAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPortAvailable not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}
func (UnimplementedPortServiceServer) testEmbeddedByValue()                     {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_GetRandomPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetRandomPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetRandomPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetRandomPort(ctx, req.(*GetRandomPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetRandomPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetRandomPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetRandomPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetRandomPorts(ctx, req.(*GetRandomPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetAppPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetAppPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetAppPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetAppPort(ctx, req.(*GetAppPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_SetAppPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).SetAppPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_SetAppPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).SetAppPort(ctx, req.(*SetAppPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_QuickSetAppPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuickSetAppPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).QuickSetAppPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_QuickSetAppPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).QuickSetAppPort(ctx, req.(*QuickSetAppPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_DeleteAppPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).DeleteAppPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_DeleteAppPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).DeleteAppPort(ctx, req.(*DeleteAppPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_IsPortAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPortAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).IsPortAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_IsPortAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).IsPortAvailable(ctx, req.(*IsPortAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port_service.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomPort",
			Handler:    _PortService_GetRandomPort_Handler,
		},
		{
			MethodName: "GetRandomPorts",
			Handler:    _PortService_GetRandomPorts_Handler,
		},
		{
			MethodName: "GetAppPort",
			Handler:    _PortService_GetAppPort_Handler,
		},
		{
			MethodName: "SetAppPort",
			Handler:    _PortService_SetAppPort_Handler,
		},
		{
			MethodName: "QuickSetAppPort",
			Handler:    _PortService_QuickSetAppPort_Handler,
		},
		{
			MethodName: "DeleteAppPort",
			Handler:    _PortService_DeleteAppPort_Handler,
		},
		{
			MethodName: "IsPortAvailable",
			Handler:    _PortService_IsPortAvailable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/port_service.proto",
}
